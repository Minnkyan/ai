{
    "title": "Do it! C++ 완전 정복",
    "introduce": "실무에서 요구하는 C++ 프로그래밍 방법!\n이제 C 언어 스타일을 벗어나 C++답게 코딩하자!\n\n현업에서 오랫동안 C++를 다뤄 온 전문가가 객체지향 프로그래밍을 배우는 독자에게 그 개념부터 활용법을 친절하게 안내한다. C++ 언어의 기본 문법을 그림과 비유로 쉽게 풀어서 설명하고, 오늘도 C++로 프로그래밍하는 저자의 경험을 바탕으로 객체지향 프로그래밍이 실무에서 어떻게 활용되는지를 알려 준다. 추상화, 캡슐화, 다형성, 상속성 등 객체지향 프로그래밍의 4가지 특징을 소스 코드에 어떻게 적용하는지 자세히 설명하고, 수 백 줄에 걸쳐 게임 속 몬스터를 구현해 보면서 SOLID 설계 원칙까지 적용된 소스 코드를 작성해 본다. 중간중간 퀴즈를 풀며 주요 개념을 확인하고 단원을 마친 후에는 되새김 문제를 풀며 실력을 다질 수 있다. 특히 되새김 문제는 코딩 테스트를 준비하는 독자도 고려해 난도를 조절했으며 양질의 해답 코드와 해설을 별도로 제공한다.",
    "toc": "========================\n첫째마당 C++ 프로그래밍 기초\n========================\n01 C++ 프로그래밍 시작하기\n01-1 C++ 언어 알아보기\n01-2 개발 환경 준비하기\n\n02 변수와 연산자\n02-1 C++ 표준 입출력\n02-2 데이터 형식\n02-3 변수의 유효 범위와 형식 변환\n02-4 키워드와 리터럴\n02-5 표현식과 연산자\n\n03 포인터와 메모리 구조\n03-1 포인터와 메모리\n03-2 함수와 구조체\n03-3 정적 변수와 상수 변수\n03-4 레퍼런스 변수\n\n04 실행 흐름 제어\n04-1 조건문으로 흐름 제어\n04-2 반복문으로 흐름 제어\n04-3 표현식과 구문의 차이\n\n05 예외 처리하기\n05-1 예외 처리 구문\n05-2 예외 처리 생략과 실패 대응\n\n=======================\n\n=======================\n06 객체지향과 클래스\n06-1 객체지향 이전의 프로그래밍 패러다임\n06-2 객체지향 프로그래밍\n06-3 클래스와 인스턴스\n\n07 객체지향 프로그래밍 특징\n07-1 추상화와 캡슐화\n07-2 상속성과 다형성\n07-3 생성자와 소멸자\n07-4 자신을 가리키는 this 포인터\n07-5 함수와 연산자 오버로딩\n07-6 접근 지정자와 프렌드\n\n08 객체지향을 돕는 기능들\n08-1 컴포지션과 어그리게이션\n08-2 가상 함수와 동적 바인딩\n08-3 추상 클래스와 정적 멤버\n\n09 객체지향 설계 원칙\n09-1 단일 책임 원칙(SRP)\n09-2 개방폐쇄 원칙(OCP)\n09-3 리스코프 치환 원칙(LSP)\n09-4 인터페이스 분리 원칙(ISP)\n09-5 의존성 역전 원칙(DIP)\n\n10 템플릿\n10-1 함수 템플릿\n10-2 클래스 템플릿\n\n=======================\n\n=======================\n11 C++ 표준 라이브러리\n11-1 표준 라이브러리 구성과 사용법\n11-2 문자열 라이브러리\n11-3 파일 시스템\n11-4 기타 유용한 함수\n\n12 STL의 컨테이너와 알고리즘\n12-1 컨테이너와 반복자\n12-2 알고리즘\n\n=======================\n\n=======================\n13 모던 C++에 추가된 기능\n13-1 C++ 버전별 주요 특징\n13-2 현대적 관점의 C++\n\n14 새로운 데이터 형식과 라이브러리\n14-1 형식 연역, 열거형, 수학 상수, 널 포인터, 2진수 표현\n14-2 상수 지정자 constexpr\n14-3 function 객체\n14-4 스마트 포인터\n\n15 새로운 구문 1\n15-1 튜플과 구조적 바인딩\n15-2 범위 기반 for 문\n15-3 제어문의 초기화 구문\n15-4 람다 표현식\n\n16 새로운 구문 2\n16-1 폴드 표현식\n16-2 3방향 비교 연산자\n16-3 using 키워드\n16-4 함수 키워드(default, delete, override, final)\n찾아보기"
}