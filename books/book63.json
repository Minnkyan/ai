{
    "title": "AI 코딩 어시스턴트 깃허브 코파일럿 제대로 활용하기",
    "introduce": "무한한 잠재력을 지닌 AI 지원 코딩 도구를 사용해 효율적으로 코딩하세요!\n\n컴퓨터 프로그램을 작성하는 방식이 완전히 바뀌었다. 깃허브 코파일럿(GitHub Copilot)은 사람의 말로 프로그램이 수행하기를 원하는 작업을 설명하면 AI가 즉시 코드를 생성한다. 이 책은 코드를 작성해 본 적이 없는 사람도 AI를 사용해 파이썬 프로그램을 만들고 개선할 수 있는 길을 보여준다. 프로그래밍의 자잘한 세부 사항에 시간을 낭비하는 대신, AI 어시스턴트로 아이디어를 즉시 실현하는 방법을 배워보자. 책을 따라 하다 보면 AI 어시스턴트가 생성하는 내용을 이해하고 개선할 수 있을 만큼 파이썬 언어도 익힐 수 있다. 컴퓨터에서 파일을 옮기고 새로운 프로그램을 설치할 수 있는 사람이라면 누구나 유용한 소프트웨어 작성법을 배울 수 있다!",
    "toc": "▣ 01장: 코파일럿을 이용한 AI 어시스턴트 프로그램 소개\n\n1.1 컴퓨터와 대화하는 방법\n__1.1.1 조금 더 쉽게 만들기\n__1.1.2 훨씬 더 쉽게 만들기\n1.2 기술 정보\n__1.2.1 AI 어시스턴트, 코파일럿\n__1.2.2 코파일럿이 코드를 생성할 때 보이지 않는 곳에서 동작하는 방식(30초 요약)\n1.3 코파일럿이 바꾸게 될 프로그래밍 학습 방법\n1.4 코파일럿이 제공하는 또 다른 기능들\n1.5 코파일럿을 사용할 때의 주의점 및 과제\n1.6 필요한 기술\n1.7 코파일럿과 같은 AI 코드 어시스턴트에 대한 사회적 우려\n\n\n\n2.1 학습을 위한 개발 환경 설정하기\n__2.1.1 개발 환경 개요\n2.2 개발 환경 설정\n2.3 VS Code에서 코파일럿으로 작업하기\n__2.3.1 작업 폴더 설정\n__2.3.2 설정이 제대로 동작하는지 확인\n2.4 코파일럿을 사용할 때 자주 겪는 문제들\n2.5 첫 번째 프로그래밍 실습\n__2.5.1 데이터 처리 작업에서의 코파일럿의 유용성\n\n\n\n3.1 함수\n__3.1.1 함수의 구성 요소\n__3.1.2 함수 사용\n3.2 함수의 장점\n3.3 함수의 역할\n3.4 함수 사용이 적합한 작업은 무엇인가요?\n__3.4.1 좋은 함수의 속성\n__3.4.2 좋은 (그리고 나쁜) 리프 함수의 예\n3.5 코파일럿을 사용한 함수 설계 주기\n3.6 코파일럿을 사용해 좋은 함수 만들기\n__3.6.1 다니엘의 주식 추천\n__3.6.2 레오의 비밀번호\n__3.6.3 강력한 비밀번호 설정하기\n__3.6.4 스크래블 점수판\n__3.6.5 최고의 단어\n\n\n\n4.1 코드를 읽을 수 있어야 하는 이유\n4.2 코파일럿에게 코드 설명 요청하기\n4.3 꼭 알아야 할 10 가지 프로그래밍 기능: 1부\n__4.3.1 #1. 함수\n__4.3.2 #2. 변수\n__4.3.3 #3. 조건문\n__4.3.4 #4. 문자열\n__4.3.5 #5. 리스트\n4.3.6 결론\n\n\n\n5.1 꼭 알아야 할 10 가지 프로그래밍 기능: 2부\n__5.1.1 #6. 루프\n__5.1.2 #7. 들여쓰기\n__5.1.3 #8. 딕셔너리\n__5.1.4 #9. 파일\n__5.1.5 #10. 모듈\n\n\n\n6.1 코드 테스트가 중요한 이유\n6.2 폐쇄형 및 개방형 테스트\n__6.2.1 폐쇄형 테스트\n__6.2.2 테스트 케이스를 어떻게 작성할지는 어떤 기준으로 정하나요?\n__6.2.3 개방형 테스트\n6.3 코드를 테스트 하는 방법\n__6.3.1 파이썬 프롬프트를 사용한 테스트\n__6.3.2 파이썬 파일에 테스트 코드를 작성(이 책에서는 이 방식은 사용하지 않음)\n__6.3.3 독테스트\n6.4 코파일럿을 이용한 함수 설계 주기 다시 살펴보기\n6.5 전체 테스트 예제\n__6.5.1 빈자리가 가장 많이 남아있는 줄에는 현재 몇 개의 빈자리가 남아 있을까?\n__6.5.2 더 나은 솔루션을 찾기 위한 프롬프트 개선\n__6.5.3 새로운 코드 테스트하기\n6.6 또 다른 전체 테스트 예시 - 파일을 이용한 테스트\n__6.6.1 어떤 테스트를 해야 할까?\n__6.6.2 함수 만들기\n__6.6.3 함수 테스트\n__6.6.4 doctest를 사용할 때 주의할 점\n\n\n\n7.1 문제 분해\n7.2 하향식 설계 사례\n7.3 소설의 저자 식별하기\n7.4 하향식 설계 방법을 사용한 저자 식별\n7.5 프로세스 단계의 하위 문제 분석\n__7.5.1 저자 불명의 책에 대한 시그니처 알아내기\n7.6 하향식 설계 요약\n7.7 기능 구현\n__7.7.1 clean_word\n__7.7.2 average_word_length\n__7.7.3 different_to_total\n__7.7.4 exactly_once_to_total\n__7.7.5 split_string\n__7.7.6 get_sentences\n__7.7.7 average_sentence_length\n__7.7.8 get_phrases\n__7.7.9 average_sentence_complexity\n__7.7.10 make_signature\n__7.7.11 get_all_signatures\n__7.7.12 get_score\n__7.7.13 lowest_score\n__7.7.14 process_data\n__7.7.15 make_guess\n7.8 더 나아가기\n\n\n\n8.1 오류(버그)의 원인은 무엇인가요?\n8.2 버그를 찾는 방법\n__8.2.1 print 문을 사용하여 코드 동작 살펴보기\n__8.2.2 VS Code의 디버거 기능으로 코드 동작 파악하기\n8.3 찾아낸 버그를 수정하는 방법\n__8.3.1 채팅을 통해 코파일럿에게 버그 수정 요청하기\n__8.3.2 코파일럿에게 전체 함수를 새로 작성하도록 새 프롬프트 제공\n__8.3.3 코파일럿에게 함수 일부에 대해 타기팅된 프롬프트 제공\n__8.3.4 직접 코드의 버그 부분 수정하기\n8.4 새로운 기술을 사용해 함수 설계 주기 수정하기\n8.5 새로운 문제에 디버깅 기술 적용하기\n8.6 디버거를 사용한 코드 이해\n8.7 디버깅 시 주의할 점\n\n\n\n9.1 도구를 프로그래밍하는 이유\n9.2 코파일럿을 사용해 도구 작성하기\n9.3 예시 1: 이메일 텍스트 정리\n__9.3.1 코파일럿과 대화하기\n__9.3.2 이메일 정리를 위한 도구 작성하기\n9.4 예시 2: PDF 파일에 표지 추가하기\n__9.4.1 코파일럿과 대화하기\n__9.4.2 도구 작성하기\n9.5 예시 3: 휴대폰에 들어 있는 사진 합치기\n__9.5.1 코파일럿과 대화하기\n__9.5.2 하향식 설계\n__9.5.3 도구 작성하기\n\n\n\n10.1 게임 프로그램\n10.2 무작위성 추가\n__10.3 예시 1: 숫소와 암소\n__10.3.1 게임 동작 방식\n__10.3.2 하향식 설계\n__10.3.3 매개변수 및 반환값의 자료형\n__10.3.4 기능 구현\n__10.3.5 숫소와 암소를 위한 그래픽 인터페이스 추가하기\n10.4 예시 2: 보가트\n__10.4.1 게임 동작 방식\n__10.4.2 하향식 설계\n__10.4.3 기능 구현\n\n\n\n11.1 프롬프트 패턴\n__11.1.1 뒤집힌 상호작용 패턴\n__11.1.2 페르소나 패턴\n11.2 한계점과 향후 방향성\n__11.2.1 현재 코파일럿이 어려움을 겪는 부분\n__11.2.2 코파일럿은 새로운 프로그래밍 언어인가요?"
}