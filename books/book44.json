{
    "title": "자바/스프링 개발자를 위한 실용주의 프로그래밍",
    "introduce": "소프트웨어 개발을 잘하고 싶다면 ‘개발’ 공부를 해야 합니다!\n\n자바 개발자가 코틀린 같은 신생 언어를 다룰 수 있게 된다고 해서 개발을 더 잘하게 되는 것은 아니다. 소프트웨어 개발 능력을 키우고 싶다면 ‘개발’ 그 자체를 공부하고 기초적인 설계 원리를 이해할 수 있어야 한다. 이 책은 객체지향, SOLID, 디자인 패턴, 테스트 같은 주요 개발 관련 이론이 실제 프로젝트에 어떻게 적용될 수 있는지 설명한다.",
    "toc": "[1부] 객체지향\n\n▣ 들어가며\n\n개발을 배워야 한다\n__기술 vs. 개발\n__개발 능력을 길러야 하는 이유\n__스프링과 JPA는 기술이다\n이 책을 출간하게 된 이유\n\n▣ 01장: 절차지향과 비교하기\n\n1.1 책임과 역할\n1.2 TDA 원칙\n\n\n\n2.1 VO(Value Object: 값 객체)\n__2.1.1 불변성\n__2.1.2 동등성\n__2.1.3 자가 검증\n2.2 DTO(Data Transfer Object: 데이터 전송 객체)\n2.3 DAO(Data Access Object: 데이터 접근 객체)\n2.4 엔티티(Entity: 개체)\n__2.4.1 도메인 엔티티\n__2.4.2 DB 엔티티\n__2.4.3 JPA 엔티티\n__2.4.4 해석\n2.5 객체의 다양한 종류\n\n\n\n3.1 덕 타이핑\n3.2 행동과 구현\n3.3 인터페이스\n3.4 행동과 역할\n3.5 메서드\n\n\n\n4.1 SOLID 소개\n__4.1.1 단일 책임 원칙\n__4.1.2 개방 폐쇄 원칙\n__4.1.3 리스코프 치환 원칙\n__4.1.4 인터페이스 분리 원칙\n__4.1.5 의존성 역전 원칙\n4.2 의존성\n__4.2.1 의존성 주입\n__4.2.2 의존성 역전\n__4.2.3 의존성 역전과 스프링\n__4.2.4 의존성이 강조되는 이유\n4.3 SOLID와 객체지향\n4.4 디자인 패턴\n\n\n\n5.1 순환 참조의 문제점\n__5.1.1 무한 루프\n__5.1.2 시스템 복잡도\n5.2 순환 참조를 해결하는 방법\n__5.2.1 불필요한 참조 제거\n__5.2.2 간접 참조 활용\n__5.2.3 공통 컴포넌트 분리\n__5.2.4 이벤트 기반 시스템 사용\n5.3 양방향 매핑\n5.4 상위 수준의 순환 참조\n\n\n\n\n\n6.1 스마트 UI\n6.2 양방향 레이어드 아키텍처\n__6.2.1 레이어별 모델 구성\n__6.2.2 공통 모듈 구성\n6.3 완화된 레이어드 아키텍처\n6.4 트랜잭션 스크립트\n\n\n\n7.1 Manager\n7.2 서비스보다 도메인 모델\n7.3 작은 기계\n7.4 조언\n\n\n\n8.1 레이어드 아키텍처의 최소 조건\n8.2 잘못된 레이어드 아키텍처\n__8.2.1 JPA 엔티티 우선 접근\n__8.2.2 API 엔드포인트 우선 접근\n__8.2.3 본질을 다시 생각하기\n8.3 진화하는 아키텍처\n__8.3.1 인지 모델 변경하기\n__8.3.2 JPA와의 결합 끊기\n__8.3.3 웹 프레임워크와의 결합 끊기\n8.4 새로운 접근법\n8.5 빈약한 도메인\n\n\n\n9.1 모듈성\n__9.1.1 독립성\n__9.1.2 은닉성\n9.2 패키지 구조\n__9.2.1 계층 기반 구조\n__9.2.2 도메인 기반 구조\n__9.2.3 정리\n9.3 패키지와 모듈\n\n\n\n10.1 소프트웨어 개발의 시작\n10.2 애플리케이션의 본질\n10.3 도메인 모델과 영속성 객체\n__10.3.1 통합하기 전략\n__10.3.2 구분하기 전략\n__10.3.3 평가\n\n\n\n11.1 타입 기반 주입\n11.2 자가 호출\n\n\n\n\n\n12.1 Regression\n12.2 의도\n12.3 레거시 코드\n\n\n\n13.1 구글의 테스트 피라미드\n13.2 테스트 분류 기준\n13.3 소형 테스트의 중요성\n\n\n\n14.1 Dummy\n14.2 Stub\n14.3 Fake\n14.4 Mock\n__14.4.1 상태 기반 검증\n__14.4.2 행위 기반 검증\n__14.4.3 상태 기반 vs. 행위 기반\n14.5 Spy\n14.6 정리\n\n\n\n15.1 테스트를 어렵게 만드는 요소\n__15.1.1 숨겨진 입력\n__15.1.2 숨겨진 출력\n15.2 테스트가 보내는 신호\n\n\n\n16.1 테스트와 SRP\n16.2 테스트와 ISP\n16.3 테스트와 OCP, DIP\n16.4 테스트와 LSP\n\n\n\n17.1 TDD\n17.2 BDD\n\n\n\nA: 포트-어댑터 패턴\nB: 클린 아키텍처\nC: 소프트웨어 엔지니어\nD: 실용주의\nE: 참고 자료"
}