{
    "title": "자바 잘 읽는 법",
    "introduce": "자바 버그와 성능 문제를 찾는 프로파일링, 디버깅, 로깅 기법\n\n실무에서 개발자는 기존 코드를 읽고 이해하는 데 가장 많은 시간을 쓴다. 이 책은 익숙하지 않은 자바 코드를 파악하는 시간을 줄여주는 실용적인 기법들을 소개한다. 프로파일링과 디버깅, 나아가 JVM 애플리케이션이 실제로 어떻게 작동하는지 이해함으로써 디펜던시나 충돌의 근본 원인을 찾고, 예상치 못한 결과를 해석할 수 있다. 디버깅의 기초부터 마이크로서비스 아키텍처에서 문제를 찾기 위한 고급 방법까지, 딱딱하지 않은 그림과 흥미로운 실제 사례와 함께 자바 코드를 ‘잘 읽는 법’을 알려준다.",
    "toc": "옮긴이 머리말 x\n베타리더 후기 xi\n시작하며 xiv\n감사의 글 xvi\n이 책에 대하여 xviii\n표지에 대하여 xxi\n\nPART I 트러블슈팅 기본 테크닉\n\nCHAPTER 1 앱에서 모호한 부분 밝히기 3\n1.1 앱을 더 쉽게 이해하는 방법 4\n1.2 일반적인 코드 조사 시나리오 8\n__1.2.1 예상과 다른 아웃풋의 원인을 밝힌다 9\n__1.2.2 특정 기술을 습득한다 14\n__1.2.3 속도 저하 이유를 알아낸다 15\n__1.2.4 앱 크래시가 발생하는 이유를 이해한다 16\n1.3 이 책에서 배울 내용 19\n요약 20\n\n\n2.1 코드 분석만으로는 불충분한 경우 23\n2.2 디버거를 이용한 코드 조사 26\n__2.2.1 실행 스택 트레이스란 무엇이고 어떻게 사용해야 할까? 31\n__2.2.2 디버거로 코드 탐색하기 36\n2.3 디버거로도 충분하지 않다면 43\n요약 45\n\n\n3.1 조건부 브레이크포인트로 조사 시간 최소화 48\n3.2 실행을 중단시키지 않고도 브레이크포인트를 사용하는 방법 52\n3.3 조사 시나리오를 동적으로 변경하기 55\n3.4 조사 케이스를 되감기 58\n요약 64\n\n\n4.1 원격 디버깅이란? 66\n4.2 원격 환경에서 조사하기 69\n__4.2.1 시나리오 70\n__4.2.2 원격 환경의 문제 조사하기 71\n요약 81\n\n\n5.1 로그를 이용하여 조사하기 87\n__5.1.1 로그에 기록된 예외 식별 88\n__5.1.2 예외 스택 트레이스로 어디서 메서드를 호출했는지 식별 89\n__5.1.3 멀티스레드 아키텍처에서 커맨드의 실행 시간 측정 91\n__5.1.4 멀티스레드 아키텍처에서 커맨드 실행 문제 조사 92\n5.2 로깅을 구현하는 방법 94\n__5.2.1 로그 메시지 저장 94\n__5.2.2 로깅 레벨을 정의하고 로깅 프레임워크를 사용하는 방법 95\n__5.2.3 로깅 때문에 발생하는 문제와 예방 조치 102\n5.3 로그와 원격 디버깅 107\n요약 108\n\n\n\n\n6.1 프로파일러는 어떤 경우에 유용할까? 112\n__6.1.1 비정상적인 리소스 사용량 식별 112\n__6.1.2 실행되는 코드 찾기 113\n__6.1.3 앱 실행 속도가 느려지는 원인을 파악 114\n6.2 프로파일러 사용 방법 114\n__6.2.1 VisualVM 설치 및 구성 115\n__6.2.2 CPU와 메모리 사용량 관찰 117\n__6.2.3 메모리 누수 현상 식별 127\n요약 132\n\n\n7.1 샘플링으로 실행되는 코드 관찰 134\n7.2 프로파일링으로 메서드의 실행 횟수 파악 142\n7.3 프로파일러로 앱이 실제로 실행하는 SQL 쿼리 파악 144\n__7.3.1 프로파일러로 프레임워크에서 생성되지 않은 SQL 쿼리 식별 144\n__7.3.2 프로파일러로 프레임워크에서 생성된 SQL 쿼리 식별 150\n__7.3.3 프로파일러로 프로그램에서 생성된 SQL 쿼리 식별 153\n요약 157\n\n\n8.1 JDBC 접속 문제 감지 160\n8.2 호출 그래프를 보고 앱의 코드 설계 파악 173\n8.3 플레임 그래프를 그려 성능 문제 밝히기 175\n8.4 NoSQL DB에서의 쿼리 분석 179\n요약 180\n\n\n9.1 스레드 락 모니터링 184\n9.2 스레드 락 분석 189\n9.3 대기 중인 스레드 분석 198\n요약 205\n\n\n10.1 스레드 덤프 수집하기 208\n__10.1.1 프로파일러로 스레드 덤프 수집 210\n__10.1.2 커맨드 라인에서 스레드 덤프 수집 212\n10.2 스레드 덤프를 읽는 방법 215\n__10.2.1 일반 텍스트 스레드 덤프 216\n__10.2.2 도구를 활용하여 스레드 덤프 읽기 222\n요약 225\n\n\n11.1 샘플링과 프로파일링으로 메모리 이슈 진단 228\n11.2 힙 덤프를 수집하여 메모리 누수가 발생하는 곳 찾기 235\n__11.2.1 힙 덤프 수집 236\n__11.2.2 힙 덤프 읽는 방법 240\n__11.2.3 OQL 콘솔에서 힙 덤프 쿼리 245\n요약 251\n\n\n\n\n12.1 서비스 간 통신 문제 조사 256\n__12.1.1 HTTP 서버 프로브로 HTTP 요청 관찰 257\n__12.1.2 HTTP 클라이언트 프로브로 앱이 보낸 HTTP 요청 관찰 259\n__12.1.3 소켓의 로 레벨 이벤트 조사 261\n12.2 통합 로그 모니터링의 중요성 263\n12.3 배포 도구를 조사에 활용하는 법 270\n__12.3.1 결함 주입으로 재현하기 곤란한 문제를 비슷하게 모방 272\n__12.3.2 미러링 기법을 테스트 및 에러 감지에 활용 273\n요약 274\n\n\n\n\n\n\n\n\nD.1 스레드란 무엇인가? 282\nD.2 스레드의 수명 주기 284\nD.3 스레드 동기화 286\n__D.3.1 동기화 블록 286\n__D.3.2 wait(), notify(), notifyAll() 사용 289\n__D.3.3 스레드 조인 290\n__D.3.4 정해진 시간 동안 스레드 차단 291\n__D.3.5 스레드와 블로킹 객체 동기화하기 292\nD.4 멀티스레드 아키텍처의 일반적인 문제 293\n__D.4.1 경쟁 상태 293\n__D.4.2 데드락 294\n__D.4.3 리브락 295\n__D.4.4 기아 296\nD.5 추가 자료 297\n\n\nE.1 JVM이 앱의 메모리를 구성하는 방법 300\nE.2 스레드가 로컬 데이터를 저장하는 데 사용하는 스택 302\nE.3 앱이 객체 인스턴스를 저장하는 데 사용하는 힙 308\nE.4 데이터 유형을 저장하기 위한 메타스페이스 메모리 위치 311\n\n찾아보기 313"
}